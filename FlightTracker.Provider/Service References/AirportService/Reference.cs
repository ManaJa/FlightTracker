//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlightTracker.Provider.AirportService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.webserviceX.NET", ConfigurationName="AirportService.airportSoap")]
    internal interface airportSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.webserviceX.NET/getAirportInformationByISOCountryCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getAirportInformationByISOCountryCode(string CountryAbbrviation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/getAirportInformationByISOCountryCode", ReplyAction="*")]
        System.IAsyncResult BegingetAirportInformationByISOCountryCode(string CountryAbbrviation, System.AsyncCallback callback, object asyncState);
        
        string EndgetAirportInformationByISOCountryCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.webserviceX.NET/getAirportInformationByCityOrAirportName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getAirportInformationByCityOrAirportName(string cityOrAirportName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/getAirportInformationByCityOrAirportName", ReplyAction="*")]
        System.IAsyncResult BegingetAirportInformationByCityOrAirportName(string cityOrAirportName, System.AsyncCallback callback, object asyncState);
        
        string EndgetAirportInformationByCityOrAirportName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.webserviceX.NET/GetAirportInformationByCountry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAirportInformationByCountry(string country);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetAirportInformationByCountry", ReplyAction="*")]
        System.IAsyncResult BeginGetAirportInformationByCountry(string country, System.AsyncCallback callback, object asyncState);
        
        string EndGetAirportInformationByCountry(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.webserviceX.NET/getAirportInformationByAirportCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getAirportInformationByAirportCode(string airportCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/getAirportInformationByAirportCode", ReplyAction="*")]
        System.IAsyncResult BegingetAirportInformationByAirportCode(string airportCode, System.AsyncCallback callback, object asyncState);
        
        string EndgetAirportInformationByAirportCode(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface airportSoapChannel : FlightTracker.Provider.AirportService.airportSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class getAirportInformationByISOCountryCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAirportInformationByISOCountryCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class getAirportInformationByCityOrAirportNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAirportInformationByCityOrAirportNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class GetAirportInformationByCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAirportInformationByCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class getAirportInformationByAirportCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAirportInformationByAirportCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class airportSoapClient : System.ServiceModel.ClientBase<FlightTracker.Provider.AirportService.airportSoap>, FlightTracker.Provider.AirportService.airportSoap {
        
        private BeginOperationDelegate onBegingetAirportInformationByISOCountryCodeDelegate;
        
        private EndOperationDelegate onEndgetAirportInformationByISOCountryCodeDelegate;
        
        private System.Threading.SendOrPostCallback ongetAirportInformationByISOCountryCodeCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAirportInformationByCityOrAirportNameDelegate;
        
        private EndOperationDelegate onEndgetAirportInformationByCityOrAirportNameDelegate;
        
        private System.Threading.SendOrPostCallback ongetAirportInformationByCityOrAirportNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAirportInformationByCountryDelegate;
        
        private EndOperationDelegate onEndGetAirportInformationByCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetAirportInformationByCountryCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAirportInformationByAirportCodeDelegate;
        
        private EndOperationDelegate onEndgetAirportInformationByAirportCodeDelegate;
        
        private System.Threading.SendOrPostCallback ongetAirportInformationByAirportCodeCompletedDelegate;
        
        public airportSoapClient() {
        }
        
        public airportSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public airportSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public airportSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public airportSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<getAirportInformationByISOCountryCodeCompletedEventArgs> getAirportInformationByISOCountryCodeCompleted;
        
        public event System.EventHandler<getAirportInformationByCityOrAirportNameCompletedEventArgs> getAirportInformationByCityOrAirportNameCompleted;
        
        public event System.EventHandler<GetAirportInformationByCountryCompletedEventArgs> GetAirportInformationByCountryCompleted;
        
        public event System.EventHandler<getAirportInformationByAirportCodeCompletedEventArgs> getAirportInformationByAirportCodeCompleted;
        
        public string getAirportInformationByISOCountryCode(string CountryAbbrviation) {
            return base.Channel.getAirportInformationByISOCountryCode(CountryAbbrviation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAirportInformationByISOCountryCode(string CountryAbbrviation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAirportInformationByISOCountryCode(CountryAbbrviation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetAirportInformationByISOCountryCode(System.IAsyncResult result) {
            return base.Channel.EndgetAirportInformationByISOCountryCode(result);
        }
        
        private System.IAsyncResult OnBegingetAirportInformationByISOCountryCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryAbbrviation = ((string)(inValues[0]));
            return this.BegingetAirportInformationByISOCountryCode(CountryAbbrviation, callback, asyncState);
        }
        
        private object[] OnEndgetAirportInformationByISOCountryCode(System.IAsyncResult result) {
            string retVal = this.EndgetAirportInformationByISOCountryCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAirportInformationByISOCountryCodeCompleted(object state) {
            if ((this.getAirportInformationByISOCountryCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAirportInformationByISOCountryCodeCompleted(this, new getAirportInformationByISOCountryCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAirportInformationByISOCountryCodeAsync(string CountryAbbrviation) {
            this.getAirportInformationByISOCountryCodeAsync(CountryAbbrviation, null);
        }
        
        public void getAirportInformationByISOCountryCodeAsync(string CountryAbbrviation, object userState) {
            if ((this.onBegingetAirportInformationByISOCountryCodeDelegate == null)) {
                this.onBegingetAirportInformationByISOCountryCodeDelegate = new BeginOperationDelegate(this.OnBegingetAirportInformationByISOCountryCode);
            }
            if ((this.onEndgetAirportInformationByISOCountryCodeDelegate == null)) {
                this.onEndgetAirportInformationByISOCountryCodeDelegate = new EndOperationDelegate(this.OnEndgetAirportInformationByISOCountryCode);
            }
            if ((this.ongetAirportInformationByISOCountryCodeCompletedDelegate == null)) {
                this.ongetAirportInformationByISOCountryCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAirportInformationByISOCountryCodeCompleted);
            }
            base.InvokeAsync(this.onBegingetAirportInformationByISOCountryCodeDelegate, new object[] {
                        CountryAbbrviation}, this.onEndgetAirportInformationByISOCountryCodeDelegate, this.ongetAirportInformationByISOCountryCodeCompletedDelegate, userState);
        }
        
        public string getAirportInformationByCityOrAirportName(string cityOrAirportName) {
            return base.Channel.getAirportInformationByCityOrAirportName(cityOrAirportName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAirportInformationByCityOrAirportName(string cityOrAirportName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAirportInformationByCityOrAirportName(cityOrAirportName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetAirportInformationByCityOrAirportName(System.IAsyncResult result) {
            return base.Channel.EndgetAirportInformationByCityOrAirportName(result);
        }
        
        private System.IAsyncResult OnBegingetAirportInformationByCityOrAirportName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cityOrAirportName = ((string)(inValues[0]));
            return this.BegingetAirportInformationByCityOrAirportName(cityOrAirportName, callback, asyncState);
        }
        
        private object[] OnEndgetAirportInformationByCityOrAirportName(System.IAsyncResult result) {
            string retVal = this.EndgetAirportInformationByCityOrAirportName(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAirportInformationByCityOrAirportNameCompleted(object state) {
            if ((this.getAirportInformationByCityOrAirportNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAirportInformationByCityOrAirportNameCompleted(this, new getAirportInformationByCityOrAirportNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAirportInformationByCityOrAirportNameAsync(string cityOrAirportName) {
            this.getAirportInformationByCityOrAirportNameAsync(cityOrAirportName, null);
        }
        
        public void getAirportInformationByCityOrAirportNameAsync(string cityOrAirportName, object userState) {
            if ((this.onBegingetAirportInformationByCityOrAirportNameDelegate == null)) {
                this.onBegingetAirportInformationByCityOrAirportNameDelegate = new BeginOperationDelegate(this.OnBegingetAirportInformationByCityOrAirportName);
            }
            if ((this.onEndgetAirportInformationByCityOrAirportNameDelegate == null)) {
                this.onEndgetAirportInformationByCityOrAirportNameDelegate = new EndOperationDelegate(this.OnEndgetAirportInformationByCityOrAirportName);
            }
            if ((this.ongetAirportInformationByCityOrAirportNameCompletedDelegate == null)) {
                this.ongetAirportInformationByCityOrAirportNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAirportInformationByCityOrAirportNameCompleted);
            }
            base.InvokeAsync(this.onBegingetAirportInformationByCityOrAirportNameDelegate, new object[] {
                        cityOrAirportName}, this.onEndgetAirportInformationByCityOrAirportNameDelegate, this.ongetAirportInformationByCityOrAirportNameCompletedDelegate, userState);
        }
        
        public string GetAirportInformationByCountry(string country) {
            return base.Channel.GetAirportInformationByCountry(country);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAirportInformationByCountry(string country, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAirportInformationByCountry(country, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAirportInformationByCountry(System.IAsyncResult result) {
            return base.Channel.EndGetAirportInformationByCountry(result);
        }
        
        private System.IAsyncResult OnBeginGetAirportInformationByCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string country = ((string)(inValues[0]));
            return this.BeginGetAirportInformationByCountry(country, callback, asyncState);
        }
        
        private object[] OnEndGetAirportInformationByCountry(System.IAsyncResult result) {
            string retVal = this.EndGetAirportInformationByCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAirportInformationByCountryCompleted(object state) {
            if ((this.GetAirportInformationByCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAirportInformationByCountryCompleted(this, new GetAirportInformationByCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAirportInformationByCountryAsync(string country) {
            this.GetAirportInformationByCountryAsync(country, null);
        }
        
        public void GetAirportInformationByCountryAsync(string country, object userState) {
            if ((this.onBeginGetAirportInformationByCountryDelegate == null)) {
                this.onBeginGetAirportInformationByCountryDelegate = new BeginOperationDelegate(this.OnBeginGetAirportInformationByCountry);
            }
            if ((this.onEndGetAirportInformationByCountryDelegate == null)) {
                this.onEndGetAirportInformationByCountryDelegate = new EndOperationDelegate(this.OnEndGetAirportInformationByCountry);
            }
            if ((this.onGetAirportInformationByCountryCompletedDelegate == null)) {
                this.onGetAirportInformationByCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAirportInformationByCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetAirportInformationByCountryDelegate, new object[] {
                        country}, this.onEndGetAirportInformationByCountryDelegate, this.onGetAirportInformationByCountryCompletedDelegate, userState);
        }
        
        public string getAirportInformationByAirportCode(string airportCode) {
            return base.Channel.getAirportInformationByAirportCode(airportCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAirportInformationByAirportCode(string airportCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAirportInformationByAirportCode(airportCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetAirportInformationByAirportCode(System.IAsyncResult result) {
            return base.Channel.EndgetAirportInformationByAirportCode(result);
        }
        
        private System.IAsyncResult OnBegingetAirportInformationByAirportCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string airportCode = ((string)(inValues[0]));
            return this.BegingetAirportInformationByAirportCode(airportCode, callback, asyncState);
        }
        
        private object[] OnEndgetAirportInformationByAirportCode(System.IAsyncResult result) {
            string retVal = this.EndgetAirportInformationByAirportCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAirportInformationByAirportCodeCompleted(object state) {
            if ((this.getAirportInformationByAirportCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAirportInformationByAirportCodeCompleted(this, new getAirportInformationByAirportCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAirportInformationByAirportCodeAsync(string airportCode) {
            this.getAirportInformationByAirportCodeAsync(airportCode, null);
        }
        
        public void getAirportInformationByAirportCodeAsync(string airportCode, object userState) {
            if ((this.onBegingetAirportInformationByAirportCodeDelegate == null)) {
                this.onBegingetAirportInformationByAirportCodeDelegate = new BeginOperationDelegate(this.OnBegingetAirportInformationByAirportCode);
            }
            if ((this.onEndgetAirportInformationByAirportCodeDelegate == null)) {
                this.onEndgetAirportInformationByAirportCodeDelegate = new EndOperationDelegate(this.OnEndgetAirportInformationByAirportCode);
            }
            if ((this.ongetAirportInformationByAirportCodeCompletedDelegate == null)) {
                this.ongetAirportInformationByAirportCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAirportInformationByAirportCodeCompleted);
            }
            base.InvokeAsync(this.onBegingetAirportInformationByAirportCodeDelegate, new object[] {
                        airportCode}, this.onEndgetAirportInformationByAirportCodeDelegate, this.ongetAirportInformationByAirportCodeCompletedDelegate, userState);
        }
    }
}
